<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>2</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>526</x>
      <y>408</y>
      <w>54</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--

- data : Type

--

+ Node&lt;Type&gt;(Type) : constructor
+ Node&lt;Type&gt;(): constructor

+ getData() : Type
+ setData(Type) : void

bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>494</x>
      <y>480</y>
      <w>84</w>
      <h>38</h>
    </coordinates>
    <panel_attributes>LinearNode&lt;Type&gt;
--

-  next : Node&lt;Type&gt; *

--
+ LinearNode&lt;Type&gt;() : constructor
+ LinearNode&lt;Type&gt;(Type) : constructor
+ LinearNde&lt;Type&gt;(Type, LinearNode&lt;Type&gt;) : constructor

+ getNext() : Node&lt;Type&gt; *
+ setNext(Node&lt;Type&gt; *) : void
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>536</x>
      <y>462</y>
      <w>6</w>
      <h>22</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>494</x>
      <y>522</y>
      <w>62</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--

- size : int
- internalArray : Type *

--

+ Array&lt;Type&gt;(Array&lt;Type&gt;) : constructor
+ Array&lt;Type&gt;(int) : constructor
+ getSize() : int
+ setAtIndex(int,Type) : void
+ getFromIndex(int) : Type
+ operator []
+ operator = Array&lt;Type&gt; &amp;
+ ~Array() : destructor


bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>622</x>
      <y>470</y>
      <w>60</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>List&lt;Type&gt;
--
# size : int
--
*List Structure Methods*
getFromIndex(int) : Type
add(Type) : void
addAtIndex(int, Type) : void
remove(int) : Type

*List Accessors*
getSize() : int
getFront() : LinearNode&lt;Type&gt; 
getEnd() : LinearNode&lt;Type&gt;


fg=dark_gray
bg=891234</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>666</x>
      <y>538</y>
      <w>60</w>
      <h>62</h>
    </coordinates>
    <panel_attributes>LinkedList&lt;Type&gt;
--
- front : LinearNode&lt;Type&gt;
- end : LinearNode&lt;Type&gt;
--
+ LinkedList() : constructor
+ ~LinkedList() : destructor

*List Structure Methods*
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type

*List Accessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt;*
+ getEnd() : LinearNode&lt;Type&gt;*




bg=3646735
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>696</x>
      <y>620</y>
      <w>50</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Queue&lt;Type&gt;
--
+ Queue() : constructor
+ ~Queue() : destructor

*Queue Methods*
+ enqueue(Type) : void
+ dequeue() : Type
+ peek() : Type

*List Structure Methods*
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type

*List Accessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt;*
+ getEnd() : LinearNode&lt;Type&gt;*

bg=98342745
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>644</x>
      <y>620</y>
      <w>50</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Stack&lt;Type&gt;
--
+ Stack() : constructor
+ ~Stack() : destructor

*Stack Methods*
+ push(Type) : void
+ pop() : Type
+ peek() : Type

*List Structure Methods*
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type

*List Accessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt;*
+ getEnd() : LinearNode&lt;Type&gt;*

bg=98342745
fg=black</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>660</x>
      <y>518</y>
      <w>24</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;100.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>576</x>
      <y>494</y>
      <w>50</w>
      <h>8</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
Made of 0...n nodes</panel_attributes>
    <additional_attributes>10.0;20.0;230.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>428</x>
      <y>486</y>
      <w>42</w>
      <h>38</h>
    </coordinates>
    <panel_attributes>Music
--
+ Music() : constructor
+ ~Music(string) : constructor
+ getXXX() : various
+ == : bool
+ &lt;&lt; : ostream
+ &lt; : bool
+ &gt; : bool

bg=777909876</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>428</x>
      <y>444</y>
      <w>42</w>
      <h>38</h>
    </coordinates>
    <panel_attributes>Crime Data
--
+ CrimeData() : constructor
+ ~CrimeData(string) : constructor
+ getXXX() : various
+ == : bool
+ &lt;&lt; : ostream
+ &lt; : bool
+ &gt; : bool

bg=777909876</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>576</x>
      <y>500</y>
      <w>50</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;230.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>576</x>
      <y>500</y>
      <w>38</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>576</x>
      <y>500</y>
      <w>38</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>712</x>
      <y>598</y>
      <w>14</w>
      <h>26</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;50.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>670</x>
      <y>598</y>
      <w>16</w>
      <h>26</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>532</x>
      <y>590</y>
      <w>44</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>LinearTester
--
bg=78766443</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>532</x>
      <y>624</y>
      <w>44</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>GraphTester
--
bg=78766443</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>578</x>
      <y>624</y>
      <w>44</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>HashtableTester
--
bg=78766443</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>578</x>
      <y>658</y>
      <w>44</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>TreeTester
--
bg=78766443</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>532</x>
      <y>658</y>
      <w>44</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>AlgorithmTester
--
bg=78766443</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>574</x>
      <y>600</y>
      <w>140</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
Aggregation</panel_attributes>
    <additional_attributes>10.0;20.0;680.0;20.0;680.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>574</x>
      <y>596</y>
      <w>78</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
Aggregation</panel_attributes>
    <additional_attributes>10.0;20.0;370.0;20.0;370.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>574</x>
      <y>592</y>
      <w>96</w>
      <h>8</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
Aggregation</panel_attributes>
    <additional_attributes>10.0;20.0;460.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>518</x>
      <y>336</y>
      <w>70</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>DoubleNode&lt;Type&gt;
--
- nextNode : DoubleNode*
- prevNode : DoubleNode*
--
+ DoubleNode()
+ DoubleNode(Type)
+ DoubleNode(Type; DoubleNode; Double Node)
get/set

bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>622</x>
      <y>326</y>
      <w>56</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>CircularList&lt;Type&gt;
--
- front : DoubleNode&lt;Type&gt;
- end : DoubleNode&lt;Type&gt;
- size : int
--
+ CircularList() : constructor
+ ~CircularList() : destructor
*List Structure Methods*
- findNode(int) : DoubleNode&lt;Type&gt;
+ getFromIndex(int) : Type
+ add(type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type
*List Accessors*
+ getSize() : int

bg=891234</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>548</x>
      <y>374</y>
      <w>6</w>
      <h>38</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;170.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>586</x>
      <y>348</y>
      <w>40</w>
      <h>8</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
0..n</panel_attributes>
    <additional_attributes>10.0;20.0;180.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>712</x>
      <y>368</y>
      <w>148</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>NonLinear :: Graph
--
- *MAXIMUM : int*
- adjacency Matrix : bool [][]
- weightCostMatrix : int [][]
- graphData : Type []
- vertexCount : int

--

Graph() : constructor

+ addVertex(const Type&amp; value) : void

*Connect vertices*
+ addEdge(int source, int target);
+ addEdgeUndirected(int source, int target) : void
+ removeEdgeCost(int surce, int target) : void

*Accessors*
+ operator [] (int vertex) : Type &amp;
+ operator [] (int vertex) : Type const
+ size() const : int

*Check connections*
+ hasUndirectedConnection(int source, int target) : const bool
+ areConnected(int source, int target) : const bool
+ neighbors(int vertex) : const std::set&lt;int&gt;

*Traversals*
+ depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+ breadthFirstTrabersal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+ costTraversal(Graph&lt;Type&gt; &amp; graph, int vertex : void
- depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex, bool markedVertices[]) : void

bg=978763556</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
